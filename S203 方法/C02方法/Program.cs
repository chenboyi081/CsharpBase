using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace C02方法
{
    class Program
    {
        static void Main(string[] args)
        {
            #region 笔记1
            /*  1. 循环: 是1段代码反复不停的执行.  中间不停.
             *     重用: 1段代码,在这个地方要执行一次, 然后在别的地方需要又执行1次.
             * 
             *  2. 实现代码重用的方式:
             *     a. 那就是复制粘贴代码.
             *        代码冗余.
             *        修改维护极度的不方便.
             *     b. 使用方法来实现代码的重用:
             *        将需要被重用的代码封装在1个方法中. 在需要执行该代码的时候,直接调用该方法就可以了.
             * 
             *  3. 方法(函数): 是对1段代码进行重用的一种机制.
             *     a.  定义方法的语法:
             *        访问修饰符 [static] 方法的返回值的类型  方法的名称([参数列表])
             *        {
             *             写上那段需要被重用的代码.
             *             方法体;
             *        }
             *     b. 定义方法的位置
             *        定义在类的下面. 切记不要定义在Main方法中.
             *        与Main方法同级别.
             *     c. 注意:
             *        a. 访问修饰符 直接写上public 就可以,
             *        b. static 也要写上.
             *        c. 方法的返回值的类型: 在没有讲方法的返回值之前 统统写void。
             *    
             * 4. 方法的调用:
             *     程序在执行的时候,只会执行Main方法中的代码.其他的方法中的代码是不会执行的.
             *     所以,如果我们只定义了1个方法,这个方法中的代码是不会执行的.
             *     如果要执行方法中的代码,那么我们必须 调用这个方法.
             *     
             *     方法的调用:
             *     在需要执行方法中的代码的地方:
             *     方法的名称();
             *     
             *     当CPU执行到调用方法的代码的时候. 就会将这个方法中的代码执行.
             *     执行完毕之后,再继续往下执行.
             *  
             * 5. 方法定义的好处
             *    a. 减少代码的冗余.
             *    b. 修改维护忒方便. 方法中的代码只要修改 那么在所有调用方法的地方都会改.
             *    c. 隐蔽代码的实现:
             *           对于调用者而言,无需关系方法的内部代码如何实现,只需要关系调用这个方法有什么效果. 
             * 
             * 6. 同学犯错列表
             *    a. 方法是要定义在类的下面,与Main函数同级别, 不要写命名空间的下面.
             *    b. 方法名的括弧的后面不要加分号.
             *    c. 方法名的后面的小括弧是不能少的.
             * 
             * 7. 方法的命名:
             *    a. 变量,是用来描述1个事物的. 为变量取名字的时候 一定要是1个名词.
             *    b. 方法,代表1个功能.其中的代码是在实现某个功能.
             *       1). 要是1个动词. 能够描述这个方法中的代码实现的功能.
             *           让调用者 可以 "知名达意"
             *       2). 每个单词的首字母大写.
             *       3). 命名规则与变量的命名规则相同. 
             * 
             * 8.方法的注释.
             *    文档注释,可以在调用方法的时候,自动提示文档注释中的内容.
             * 
             * 9. 访问修饰符: 有很多种,public只是其中1种而已.
             *    static: 如果我们定义的方法A,需要在另外的1个方法B中去调用. 
             *            如果方法B被static修饰,那么我们定义的方法A也必须要加上static. 否则就调用不了.
             *            
             * 
             * 10. 方法与方法之间是可以相互调用的.
             *     不是说我们写的方法只能在Main函数中调用. 自定义的方法之间是可以相互调用的.
             *     但是在相互之间调用的时候,要注意"死循环"
             *     
             * 11. 调试:
             *     如果希望观察方法内部的代码的执行.
             *     a. 可以在方法的内部打断点. 这样执行这个方法的代码的时候就会停住.
             *     b. 如果高亮选中的代码是在调用1个方法. 这个时候
             *        按下F10.就会1下把方法中的代码执行完毕.
             *        按下F11.就会跳到方法的内部去逐句的执行.
             *        
             *     如果高亮选中准备执行的代码是1句普通的代码. 那么按下F10和F11的效果是一样的,就是将这句代码执行.
             *     如果高亮选中准备执行的代码是在调用我们自定义的方法. 
             *         按下F10.就会1下把方法中的代码执行完毕.
             *         按下F11.就会跳到方法的内部去逐句的执行.
             *     
             *   
             * 12. 什么时候需要定义方法?
             *     a. 如果有1段代码需要重用.
             *     b. 如果1段代码是在完成1个独立的功能. 这样做的好处在于,这个功能如果后面还要用到,我只需要调用就可以.
             */
            #endregion

            /*  
             * 13. 局部变量与成员变量.
             *     局部变量: 定义在方法中的变量.
             *     成员变量: 直接定义在类下面的变量.
             *     
             *     成员变量如果需要在方法中访问.而这个方法被static修饰 那么这个成员变量也要被static修饰.
             *     
             *     a. 作用域不同
             *        成员变量可以被类下面的所有的方法访问. 局部变量只能在方法中访问.
             *     b. 默认值不同.
             *        声明成员变量的时候,如果没有为成员变量赋值,那么这个成员变量是有默认值的.
             *        如果是值类型.默认值是0 
             *        如果是引用类型的 默认值是null
             *        
             *        局部变量声明的时候如果没有赋值,那么这个局部变量中是没有值的,.所以在使用之前必须要为其赋值.
             *     
             *      c. 在方法中可以声明1个局部变量的名字和成员变量的名字相同的.
             *         如果我们直接使用改变量名来访问 访问到的是局部变量.
             *         如果要访问同名的成员变量 使用类名来访问.  Program.age
             *         
             *    
             * 
             * 14. 方法中的代码 如果方法不被调用 那么是不会执行的.
             *     调用多少次,就执行多少次.
             *     
             * 
             * 15. 方法是1个功能.完成1个独立的功能.
             *     调用者的数据需要给方法访问, 
             *     如果调用者的数据定义为局部变量,在另外的方法中是无法访问的. 为了可以被另外的方法访问.
             *     我们将其定义为成员变量.
             *     
             *     这样做虽然可以解决我们的问题.但是成员变量的特点是类下面的所有的方法都可以访问.
             *     这样就不安全了.
             *     我们希望把数据只交给指定的方法 只让指定的访问去访问.
             *     
             * 
             * 16. 方法的参数
             *     将调用者的数据交给指定的方法访问.
             *     a. 在方法的小括弧中 声明1个变量  不需要加分号.
             *        这个变量就叫做方法的参数.
             *     b. 方法的参数就相当于是这个方法的局部变量.
             *        1).所以我们不能在方法中定义1个和参数名相同的局部变量.
             *        2).我们在方法中可以直接访问这个参数.
             *     
             * 
             *     c. 在调用方法的时候,如果方法有参数. 就不能直接调用. 
             *        在调用的时候,必须要为方法的参数赋值.
             *        将要赋值给参数的值,直接的写在调用的小括弧中.
             *        
             * 
             *     d. 调用方法的步骤
             *        1) 加载方法  2) 声明参数  3)为参数赋值  4)执行方法中的代码
             *     
             *        
             *     
             *     在调用带参数的方法的时候,要注意的问题.
             *     a.  定义参数的时候,相当于声明1个局部变量.所以类型和变量名都得有,唯一的就是不需要加分号.
             *     b.  调用带参数的方法的时候.要求调用者必须要为方法的参数赋值.
             *         形式参数(形参): 定义在方法的小括弧中的参数.
             *         实际参数(实参): 在调用的时候 为形参赋的值
             *         1).因为是将实参的值赋值给形参,所以要求实参的类型要和形参的类型一致. 
             *            或者是可以满足自动类型转换的条件.
             *         2).实参的个数必须要和形参的个数一致.
             *         
             *  17.什么时候需要为方法写参数?
             *     方法是1个功能,在完成这个功能的时候,我们发现需要1个数据.这个数据的类型方法的内部可以确定.
             *     但是这个数据的具体的取值方法不确定. 只有调用者才知道这个数据的具体的取值.
             *     那么这个时候 我们就可以把这个数据定义为方法的参数, 让调用者调用方法的时候传递给我.
             *     在方法的内部去处理这个参数就可以了,这个参数的具体取值不关系,
             *     反正调用者调用的时候会传给我.传递的是什么就是什么.
             *     
             * 
             * 18. 带多个参数的方法.
             *     在小括弧中声明多个参数就可 他们之间用逗号分隔.
             *     在调用带多个参数的方法的时候:
             *     a.  在调用的时候,必须要为方法的每1个形参赋值.
             *         在调用的括弧中 将实参按照顺序写在其中 并用逗号分隔.
             *     b.  在把实参的值赋值给形参的时候,是按照顺序来赋值的.
             *         把第1个实参的值赋值给第1个形参.
             *         第n个赋值给第n个.
             *     c.  实参的个数必须要与形参的个数一致.
             *         实参的类型必须要与形参的类型一致.
             *         实参的顺序必须要与形参的顺序一致.
             *         与形参的名称无关.只要类型相同就OK
             *     
             * 19. 将光标停在调用的方法的小括弧中,ctrl+shift+空格 就可以显示方法的签名.
             * 
             * 20. return关键字.
             *     可以用在方法体中.  代表立即结束这个方法.
             *     如果return后面还有代码 是不会执行的 会立即结束方法.
             *      
             *     break是用来结束循环的.
             *     return是用来结束方法的.
             *  
             * 
             * 21. 方法执行完毕之后,有1个结果(数据),这个数据如何处理,方法的内部是不确定的.
             *     而这个结果又是调用者"翘首以盼"的.
             *     
             *     方法的内部如何将数据返回给调用者.
             *     a. 方法的返回值的类型.如果是void。代表这个方法执行完毕之后,没有任何数据要返回给调用者.
             *     b. 如何返回数据给调用者.
             *        1). 确定要返回给调用者的数据的类型.
             *        2). 修改方法的返回值的类型为要返回的数据的类型.
             *        3). 在方法结束之前,使用return关键字 将数据返回.
             *            return 要返回的数据;
             *     c. 调用者如何得到方法的返回值?
             *        声明1个与方法的返回值的类型相同的变量 接收就可以了.
             * 
             * 22. 方法返回值的时候要注意的问题.
             *     a. 一旦方法定义了返回值,那么在方法结束之前必须要通过return关键字返回1个数据.
             *        并非所有的代码路径都返回值: 你为方法定义了返回值,但是你没有通过return关键字返回数据.
             *     b. return关键字 仍然代表立即结束方法的执行.只不过这个时候在结束的同时返回1个数据.
             *     c. 在return的时候.return回去的值必须要与方法定义的返回值相同或者是满足自动类型转换的条件.
             *     d. 一旦方法定义了返回值,必须要保证每1个分支都有返回值.
             *     e. 调用者可以接收方法的返回值,也可以不接收.
             *        如果要接收 定义1个和方法的返回值的变量 接收就可.
             *        如果不接收,就不定义变量接收.
             *  
             * 23. 啥时候方法需要返回值?
             *     方法执行完毕以后,有1个数据(结果)  这个结果方法的内部不确定如何处理.
             *     只有调用者确定如何处理. 而且这个数据也是调用者想要的.
             *     那么我们就应该使用方法的返回值将其返回.
             *     
             * 
             * 24. 一定要清楚,将实参传递给形参.本质上是1个赋值的过程.
             *     把实参的值赋值给形参.
             *     注意值类型和引用类型的传递.
             * 
             * 
             * 25. 同1个类的下面,是不允许定义多个方法的名称相同的方法的.
             *     但是允许下面的情况存在:
             *     a. 方法的名字相同
             *     b. 但是方法的参数的类型或者个数不同.
             *     
             *     在调用的时候,就会根据实参的个数和类型去匹配方法.匹配到那1个 就执行那1个.
             *     a. 查找是否有这个方法名的方法. 没有就报错.
             *     b. 如果有这个方法,在根据实参的个数和类型匹配. 如果能匹配就调用,
             *        如果不能匹配报错.
             *        
             *     这就是方法的重载: 在同1个类下面,可以定义方法的名字相同的方法,但是这些同名方法的参数的个数或者类型一定要不一致.在调用的时候根据实参去匹配调用.
             *      
             *     好处?
             *     方便程序员记忆方法的名字.
             *     
             *      
             * 
             */



            //Console.WriteLine("jack");
            //Console.ReadKey(); 
            //int num = int.Parse("12");//12 
            //string str = Console.ReadLine(); 
            // GetHe(10, 20);
            //bool b = PanDuanOuShu(198); 
            //int[] arr = { 10, 30, 40, 56, 7, 8, 1 };
            //int sum = GetSum(arr);
            //Console.WriteLine(sum);
            //int max = GetMax(10, 40);
            //Console.WriteLine(max);

            double d = GetHe(12.12, 12.12);
            int he = GetHe(12, 12);
            int num = ReadInt();
             
            Console.ReadKey();
        }

        public static int GetHe(int num1, int num2)
        {
            return num1 + num2;
        }


        public static double GetHe(double num1, double num2)
        {
            return num1 + num2;
        }




        //读取输入的整数，定义成方法，(如果用户输入的是数字,则返回,否则提示用户重新输入)
        //定义1个方法 这个方法从控制台读取1个数字,如果是整数 就返回 不是整数重新输入
        public static int ReadInt()
        {
            while (true)
            {
                try
                {
                    int num = int.Parse(Console.ReadLine());
                    return num;
                }
                catch
                {
                    Console.WriteLine("请重新输入1个整数:");
                }
            }
        }






        //查找两个整数中的最大值：int GetMax()
        public static int GetMax(int num1, int num2)
        {
            int max = num1 > num2 ? num1 : num2;
            return max;
        }


        //写1个方法 这个方法求1个整型数组的累加和. 
        public static int GetSum(int[] arr)
        {
            int sum = 0;
            foreach (int item in arr)
            {
                sum += item;
            }
            return sum;
        }


        //public static int GetHe(int num1, int num2)
        //{
        //    int he = num1 + num2;
        //    return he;
        //}



        public static int Test(int num)
        {
            if (num > 10)
            {
                return 10;
            }
            else if (num < 5)
            {
                return 0;
            }
            return 1;
        }




        //写1个方法 这个方法判断1个数是不是偶数.
        public static bool PanDuanOuShu(int num)
        {
            if (num % 2 == 0)
            {
                return true;
            }
            return false;
        }




















        //public static void GetSum(int min, int max)
        //{
        //    if (min > max)
        //    {
        //        Console.WriteLine("错误");
        //        return;
        //    }
        //    int sum = 0;
        //    for (int i = min; i <= max; i++)
        //    {
        //        sum += i;
        //    }
        //}





        //public static void TestReturn()
        //{
        //    Console.WriteLine("A");
        //    Console.WriteLine("B");
        //    return;
        //    Console.WriteLine("C");
        //    Console.WriteLine("D");
        //}







        ////请写1个方法,这个方法可以求两个整型的数的结果.(+ - * /)
        //public static void GetResult(int num1, int num2, string opt)
        //{
        //    switch (opt)
        //    {
        //        case "+":
        //            Console.WriteLine(num1 + num2);
        //            break;
        //        case "-":
        //            Console.WriteLine(num1 - num2);
        //            break;
        //        case "*":
        //            Console.WriteLine(num1 * num2);
        //            break;
        //        case "/":
        //            Console.WriteLine(num1 / num2);
        //            break;
        //        default:
        //            Console.WriteLine("你的这个运算我还不会哦。。");
        //            break;
        //    }
        //}






        ////请写1个方法,求1段指定范围中的整型的数的累加和.
        //public static void GetSum(int min, int max)
        //{
        //    int sum = 0;
        //    for (int i = min; i <= max; i++)
        //    {
        //        sum += i;
        //    }
        //    Console.WriteLine(sum);
        //}

        //public static void Test(string name, int age)
        //{

        //}

        ////写1个方法,这个方法可以将两个整型的数的和打印出来。
        //public static void GetHe(int num1, int num2)
        //{
        //    //两个 整型的数.
        //    int he = num1 + num2;
        //    Console.WriteLine(he);
        //}


        #region MyRegion
        ////请写1个方法,把1个整数的因子数打印出来. 15  1 3 5  
        ////因子数就是所有可以整除这个数的数,但是不包括这个数自身 
        //public static void ShowYinZi(int num)
        //{
        //    //因子数就是所有可以整除这个数的数,但是不包括这个数自身  15  
        //    for (int i = 1; i < num/2; i++)
        //    {
        //        if (num % i == 0)
        //        {
        //            Console.WriteLine(i);
        //        }
        //    }
        //}




        ////请写1个方法. 这个方法可以判断1个数 是不是10的倍数.
        //public static void PanDuan10BeiShu(int num)
        //{
        //    if (num % 10 == 0)
        //    {
        //        Console.WriteLine("yes");
        //    }
        //    else
        //    {
        //        Console.WriteLine("no");
        //    }
        //}


        ////请写1个方法.这个方法判断1个数是不是偶数.
        //public static void PanDuanOuShu(int num)
        //{
        //    //判断数是不是1个偶数. 用这个数模以2 结果o yes no
        //    if (num % 2 == 0)
        //    {
        //        Console.WriteLine("yes");
        //    }
        //    else
        //    {
        //        Console.WriteLine("no");
        //    }
        //}



        //public static void Test(int num)
        //{
        //    Console.WriteLine(num);
        //}







        ////public static void PanDuanOuShu()
        ////{ 

        ////    if (i1 % 2 == 0)
        ////    {
        ////        Console.WriteLine("yes");
        ////    }
        ////    else
        ////    {
        ////        Console.WriteLine("No");
        ////    }
        ////}


        ////public static void ChuliData()
        ////{
        ////    num++;
        ////    Console.WriteLine(num);
        ////}



        //#region 这个方法用来显示99乘法表. +static void Show99Biao()
        ///// <summary>  
        ///// 这个方法用来显示99乘法表.
        ///// </summary>
        //public static void Show99Biao()
        //{


        //    for (int i = 1; i <= 9; i++)
        //    {
        //        for (int j = 1; j <= i; j++)
        //        {
        //            Console.Write("{0}*{1}={2}\t", j, i, i * j);
        //        }
        //        Console.WriteLine();
        //    }
        //}
        //#endregion


        ///// <summary>
        ///// 这个方法用来显示游戏的Logo
        ///// </summary>
        //public static void ShowLogo()
        //{

        //    Console.WriteLine("*********************************************");
        //    Console.WriteLine("*                                           *");
        //    Console.WriteLine("*       牛      X  飞  行   棋               *");
        //    Console.WriteLine("*                                           *");
        //    Console.WriteLine("*********************************************");
        //} 
        #endregion



        ////请写1个方法,这个方法判断1个整型数组中是否包含指定的元素.
        //public static void Contains(int[] arr, int value)
        //{
        //    //需要整型数组 
        //    bool isFind = false;
        //    foreach (int item in arr)
        //    {
        //        if (item == value)
        //        {
        //            isFind = true;
        //            Console.WriteLine("有的,陛下..");
        //            break;
        //        }
        //    }
        //    if (!isFind)
        //    {
        //        Console.WriteLine("没有,陛下...");
        //    }

        //}
    }
}

