using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace C01Review
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 1. 数据类型的转换.
             *    a. 自动类型转换.
             *       数据类型兼容  目标类型的范围要大于源类型.
             *       
             *    b. 强制类型转换:
             *       数据类型兼容的情况下
             *       将大范围变量中的值 赋值给 小范围类型的变量.
             *       
             *    c. Prase转换
             *       只能讲字符串转换为其他的类型.
             *       什么时候转换成功.
             *       
             *    d. Convert转换.
             *       万能转换.
             *       1). 做自动类型转换的时候.
             *       2). 强制类型转换.
             *       3). 转字符串的时候.
             *       
             *    e. ToString() 将任意类型的数据转换为字符串.
             *      int i = 12;
             *      stirng s =  i.ToString();
             *   
             * 2. 数据要存储 应该使用1个什么类型的变量.
             * 3.  
             *    string input = Console.ReadLine();
             *    等待用户的输入 将用户输入的内容以字符串的形式赋值给input变量.
             * 
             *  
             * 4. 自增/自减运算.
             *    a. 无论是前自增还是后自增 都是将自身的值增加1.
             *    b. 当后自增参与另外的1个语句的时候,先完成这个语句的功能 再将自身的值增加1.
             *       当前自增参与另外的1个语句的时候,先将自身的值增加1,然后再完成这个语句的功能。
             * 
             * 5. 算术运算的补充.
             *    +=
             *    -=
             *    *=
             *    /=
             *    %=
             *    
             * 6. 比较运算符与比较表达式.
             *   a. 比较表达式的结果的类型是1个bool类型的,.代表这个条件是否成立.
             *   b. > >= < <=
             *      只能比较数值类型和char类型
             *   c. == != 
             *      可以比较任意的数据类型之间的相等性或者不等性.
             *      字符串的时候 比的是两个字符串中的内容.
             *      
             * 7. 逻辑运算符与逻辑表达式.
             *    &&   ||    !  只能连接比较表达式.
             *    
             *    &&并且. 只有两边都为true的情况下 整个逻辑表达式的而结果才为为true。只要有1边为flase 那么整个逻辑表达式的结果就为false。
             *    ||或者.只要有任意的1边为true，那么整个逻辑表达式的结果才为为true  只有两边都为flase的情况下 那么整个逻辑表达式的结果就为false。
             *    ！ 取反 只能取bool的反.  
             *       !true  false
             *       !false true
             *       
             *    优先级: not and or   !  &&   ||
             *    
             * 8. if结构.
             *    有1段代码,不是非要执行. 只有当满足某个条件的时候 这段代码才会被执行,否则就不会执行.
             *    a. if结构的语法.
             *    if(bool表达式)
             *    {
             *      执行代码.
             *    }
             *    b. 执行步骤.
             *    首先计算bool表达式的结果.
             *          如果是true，就执行if中的代码.
             *          如果是false 就跳过if块中的代码 继续往下执行
             *    c. 用法.
             *    if(代码要执行的条件)//比较表达式 逻辑表达式
             *    {
             *       要执行的代码.
             *    }
             *    d. 啥时候用?
             * 
             * 
             * 9. if-else结构.
             *    a. if结构只能在条件满足的时候执行1段指定的代码.
             *    b. 新的需求: 在条件满足的时候执行1段代码,条件不满足的时候执行另外的1段代码.
             *    
             *    c. if-else结构的语法.
             *       if(bool表达式)
             *       {
             *          执行代码
             *       }
             *       else
             *       {
             *          执行代码.
             *       }
             *    d.执行步骤
             *       首先计算bool表达式的结果.
             *           结果为true： 就执行if中的代码.  不会执行else中的代码 执行完毕以后 跳出继续往下.
             *           结果为false。就跳过if中的代码 执行else中的代码 执行完毕以后 跳出继续往下.
             *           
             *    e.要注意细节:
             *      1).if与else是一起的.中间不能插入别的代码.
             *      2).if和else块中可以有任意行代码. 只要代码符合C#语法规范就可以 。
             *      3).关于bool表达式
             *         比较表达式 
             *         逻辑表达式
             *         bool变量
             *         bool常量
             *       
             * 10. if-elseif结构.
             *     多个条件需要逐个判断. 只要有1个成立 那么就执行其中的代码 后面的就忽略掉了.
             *     a. 语法.
             *     if(条件表达式1)
             *     {
             *        执行代码1
             *     }
             *     else if(条件表达式2)
             *     {
             *        执行代码2
             *     }
             *     else if(条件表达式3)
             *     {
             *        执行代码3
             *     }
             *     else
             *     {
             *        默认执行代码
             *     }
             *     b.执行步骤 。
             *       从上到下逐个的判断每1个条件表达式的结果,只要有1个为true。就执行其中的代码 完毕之后跳出整个结构.
             *       当所有条件都不成立的时候 就执行else中的代码.
             * 
             *    
             * 11.在Console.ReadLine的时候,如果直接按下回车键 那么返回给程序的内容是 ""(空的字符串)  不是null.
             * 
             * 
             */


            Console.WriteLine("输入内容:");
            string input = Console.ReadLine();//""
           



            //请用户从控制台输入1个字符  判断这个字符是 大写 小写 数字 其他.
            //Console.WriteLine("请输入1个字符:");
            //char c = char.Parse(Console.ReadLine());

            //if (c >= 'A' && c <= 'Z')
            //{
            //    Console.WriteLine("是1个大写");
            //}
            //else if (c >= 'a' && c <= 'z')
            //{
            //    Console.WriteLine("是1个小写");
            //}
            //else if (c >= '0' && c <= '9')
            //{
            //    Console.WriteLine("是1个数字");
            //}
            //else
            //{
            //    Console.WriteLine("其他的字符");
            //}






            //int i = 12;
            //if (i > 10)
            //{
            //    int j = 10;
            //    Console.WriteLine(j);
            //}



            //请输入用户的年龄. 如果成年, 就给它显示一些好看的东东. 否则 妈妈喊他回家吃饭.

            //Console.WriteLine("请输入你的年龄:");
            //int age = int.Parse(Console.ReadLine());
            //if (age >= 18)
            //{
            //    Console.WriteLine("这个东西很刺激....");
            //}
            //else
            //{
            //    Console.WriteLine("你妈妈喊你回家吃饭");
            //}



            //你若不离不弃 我便生死相依


           Console.ReadKey();


        }
    }
}
