using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace C06方法
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 1. 带参数的方法.
             *    如果1个方法带了参数,那么在调用的时候,就必须要传递参数.
             *    个数一致
             *    类型一致
             *    顺序一致
             *    与形参的名称无关系.
             *    
             * 2.方法带了参数,为什么我们在调用的时候就一定要传递实参呢?
             *    方法的参数相当于方法的1个局部变量.
             *    局部变量的特点在于使用之前必须保证这个局部变量中已经有值了.
             *    参数相对于局部变量的特殊的地方在于: 声明参数的时候没有赋值,但是我仍然可以在方法体中直接使用.
             *    
             *    方法中的代码只有在调用的时候才会执行,而带了参数的方法在执行的时候,
             *    参数里面一定 肯定 决对 有值了.
             *    因为我们要求调用者必须要为方法的形参传值.
             *    
             *    换1种说法: 虽在在声明参数的时候,参数没有值,但是当方法执行起来以后,这个参数中肯定有值了,.
             *               那么当然我们就可以直接使用了.
             *    
             * 
             * 3. 方法的参数可以带默认值. 如果方法的参数带了默认值.
             *    那么我们在调用的时候  就可以不为这个形参传值了. 如果不传值那么参数的值就是默认值.
             *    也可以为它传值,如果传值 那么参数的值就是实参的值.
             *     
             *    如果遇到重载的情况,仍然是按照参数去匹配
             *     
             * 
             * 4. 当方法的内部需要1个数据,这个数据的类型确定,但是取值有可能是1个数据的时候,我们就可以给这个参数设置默认值
             *    调用者在调用的时候,如果确实是这个数据 就不传值
             *    如果不是再传递值就可以了.
             *    
             *   
             * 5. 如果参数列表中有参数带了默认值,带默认值的参数必须出现在参数列表的最右侧.
             * 
             * 6. 显示的为形参赋值.
             *    在调用的时候.使用 形参:实参
             *    告诉编译器,将实参赋值给指定的形参.
             *     
             * 7. params可变参数
             *    a. params 关键字 用来修饰方法的参数, 修饰的参数必须是1个一维数组.
             *    b. 调用的时候. 调用者完全可以传递1个数组给形参.
             *    c. 调用者在给被params修饰的参数传递值的时候,不仅可以直接传1个数组
             *       还可以直接传递数组的元素.
             *    d. 真正在调用的时候. 会将这些数据封装在1个数组中, 传递的仍然是数组而不是元素.
             *    
             *    注意的是:
             *    a. 直接传递的元素的类型必须要与数组的元素的类型一致.
             *    b. 被params修饰的参数数组必须出现在参数列表的最后.
             *    c. 被params修饰的参数数组在参数列表中最多只允许出现1个.
             * 
             *     
             *    在传参数的时候,可以直接传递任意个元素,甚至还可以1个也不给.
             *    在方法的内部 通过判断数组的长度是否为0 来判断用户是否传参数.
             * 
             * 
             */


            //int[] arr = new int[0];   

            //sint[] arr = { 10, 20, 30, 40, 50, 60, 71, 90, 45, 6, 71, 1324, 43 }; 
            //TestParams("jack",12,12,13,14,15); 
            //new double[]{12,12,13,14,15}
            //object类是所有类的祖宗类.  int[] objetc[]
             
            //TestParams(12, 12, 12, 12, 32, 544, 56, 67, 678, 789, 9, 1); 
            //TestParams(1, 1, 3);
            //TestParams(5, 6, 7, 8, 9, 10);

            //TestParams();

            //Test();

            Console.ReadKey();

        }

        public static void Test(string str,int num)
        {

        }
        public static void Test(int num=0,string str="jack")
        {

        }

        //public static void TestParams()
        //{

        //}

        //public static int TestParams(params double[] arr)
        //{ 
        //    //在方法的内部判断调用者到底有没有传.
        //    if (arr.Length == 0)
        //    {
        //        Console.WriteLine("你丫没传..");
        //    }
        //    int sum = 0;
        //    foreach (int item in arr)
        //    {
        //        sum += item;
        //    }
        //    return sum;
        //}








        //public static void Test()
        //{

        //}

        //public static void Test(int age = 18, int num = 19)
        //{

        //    Console.WriteLine(num);
        //}

    }
}
