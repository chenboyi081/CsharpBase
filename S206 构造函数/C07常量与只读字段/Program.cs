using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace C07常量与只读字段
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 1. 常量: 被const修饰的数据 我们称之为 常量.
             * 
             * 2. 常量一旦声明,其值不允许更改.
             * 
             * 3. C#编译器在编译的时候,将声明常量的那句话省略掉了.
             *    并且在使用常量的地方.直接使用常量的值代替了.
             * 
             *    就算可以更改常量的值,那么更改也没有任何的意义.
             *    因为在编译的时候,在使用常量的地方就已经被长的值代替了.
             *    而更改常量的代码要在运行的时候才会生效. 编译在前 运行在后.
             *    
             *    
             * 4. 什么时候使用常量?
             *    如果有数据在整个程序的执行过程中,都不会发生改变,那么这个时候
             *    我们就就可以吧这些数据定义为常量,以提高程序的运行效率.
             * 
             * 5. 关于常量要注意的几个小细节.
             *    a. 在声明常量的同时 必须要为常量赋值.
             *    b. 为常量赋值不能有变量参与,因为常量的值要求在编译的时候就能确定.
             *       而变量的值要在运行的时候才可以确定.
             *    c. 常量可以是局部变量.也可以成员变量.
             *       当常量是成员变量的时候,通过类名直接点出来访问.
             *    
             *    d. 类 类型的变量是可以为const的.
             *       但是该变量的值只能是null.而不能给它new1个对象.
             *       因为常量的值要求在编译的时候确定, 而new要在运行起来才可以new。
             * 
             * 6. 常量是不属于对象的. 在创建对象的时候.对象中是不会有常量的.
             *    所以常量不能通过对象名点出来访问.
             *    只能通过类名点出访问.
             * 
             * ====================================================================
             * 
             * 1. 只读字段
             *    被readonly修饰的字段 叫做只读字段.
             *      
             *    只读字段是属于对象的成员,所以在创建对象的时候,仍然会创建字段字段.
             *    所以我们要通过对象名来访问.
             *    
             * 2. 只读字段的值一旦声明就无法改变.除了在我们的构造函数中.  
             * 
             * 
             * 3. 在创建类的对象的时候,必须要调用构造函数.
             *    为什么要调用构造函数呢?
             *    
             *    如果我们在为类声明字段的同时,为这些字段指定了默认值.
             *    那么C#编译器在编译的时候,字段是没有直接赋默认值
             *    将为每1个字段赋值的代码放到了构造函数中.而构造函数在创建对象的时候
             *    是必须要调用的,所以对象一创建, 这些字段就有我们赋的值了.
             *    
             * 4. 常量与只读字段
             *    常量的值在编译的时候确定. 只读字段的值在运行的时候确定.
             *    const是编译时确定  readonly运行的时候确定.
             * 
             * 5. readonly只能修饰字段,不能修饰局部变量.
             * 
             */

     


            //string str = "rose";
            //const string name = "jack" + "rpse";
            //Console.WriteLine(Math.PI); 
            //Console.WriteLine(Person.str);  
            //const Person p = null;

            //Person p = new Person();
            //Console.WriteLine(p.name);


            //Student s = new Student();
            //s.SayHi();

            Console.ReadKey();
        }
    }
}
