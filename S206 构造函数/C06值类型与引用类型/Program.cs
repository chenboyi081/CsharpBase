using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace C06值类型与引用类型
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 1. 值类型:
             *       所有的数值类型、char、bool、枚举、结构
             *   
             * 2. 引用类型:
             *       string 数组 类
             * 
             * 
             * 3. 划分的依据: 就是他们在内存中存储的结构不同.
             * 
             * 4. 内存中主要分为两块空间.
             *    栈空间:
             *    堆空间:
             *    他们都是用来存储数据的. 不同类型的数据存储在不同的地方.
             *    
             * 5. 局部变量:
             *    相同点: 无论局部变量是值类型的还是引用类型的,那么这个局部变量始终是开辟在栈空间中的.
             *    不同点: 值类型变量的真实的值,直接存储在栈空间中的变量中.
             *            引用类型的变量,对象是存储在堆空间中的,栈空间中的变量中存储的是对象在堆空间中的地址.
             *            
             * 6. 成员变量:
             *    成员变量属于对象的.无论这个成员变量是值类型的还是引用类型 都跟着对象一起开辟在堆空间中.
             *    这个成员变量存储值的原理和局部变量一样.
             * 
             * 7. 类类型可以当做另外的1个类的字段.
             *    类本身也是一种数据类型.
             *    
             *    如何分配空间的.
             *    
             *    如何去访问对象的成员的成员的成员.
             * 
             * 8. 变量之间相互赋值的效果不同.
             *    a. 无论是什么类型的变量之间相互赋值. 将源变量中的值拷贝一份 将这个副本赋值给目标变量.
             *    
             *    不同点在于:
             *     值类型 因为值类型的变量中存储的是真实的值,所以拷贝传递的也是真实的值.
             *            赋值完成以后,对1个变量的修改不会影响另外的1个变量的值.
             *            
             *     引用类型: 因为引用类型的变量中存储的是对象的地址,所以拷贝传递的也是地址.
             *            赋值完毕以后,两个变量指向了同1个对象. 对1个变量进行修改堆另外的变量有影响.
             *            
             *     看到了new就表示重新的创建了1个对象.
             *     
             * 
             * 
             * 
             */
            Person p = new Person();
            p.age = 19;

            Person p1 = p;
            p1 = new Person();
            p1.age = 20;
            Console.WriteLine(p.age);

           


            
            Console.ReadKey();
        }
    }
}
