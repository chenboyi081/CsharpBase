using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace C01Review
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 1. 属性:保护字段.
             *    在对字段的赋值或者取值的时候做逻辑验证.
             * 
             * 2. 语法
             *    访问修饰符 属性的类型 属性的名称
             *    {
             *        get
             *        {
             *        }
             *        set
             *        {
             *        }
             *    }
             * 属性的使用
             * 3. 关于语法
             *    访问修饰符:一般是public.
             *    属性的类型:一般情况下 和 被保护的字段的类型一致.
             *    属性的名称:建议与被保护的字段一致只做大小写区分.
             *    get:当取属性的值的时候,会执行这个属性的get块代码
             *        并且取到的值是return回去的值.
             *    set:当为属性赋值的时候,会执行set块的代码.
             *        在set里面我们可以通过关键字value拿到用户为属性赋的值
             *    一般情况下:
             *    我们在set中得到用户赋的值value 然后对它做验证,符合验证我们就其转存给被保护的字段.
             *    否则我们做默认处理
             *    在get中.我们一般情况下是直接返回被保护的字段的值.
             *    
             * 4. 属性的本质是方法.
             * 5. 属性本身不能存值.属性将用户赋的值转存给被保护的字段.
             *    C#中 真正可以存值的 只有变量
             *    
             * 6. 使用属性需要注意的是
             *    a. 在属性内部是操作字段.而不是操作属性本身,.否则就会发生"死循环"
             *    
             * 7. 只读只写属性
             * 
             * 8. 规范: 只要字段需要被外界访问,无论在对其取值或者赋值的时候有没有逻辑验证
             *          那么我们都需要为它封装1个属性.
             *          
             * 9.自动属性
             *   a. 属性对字段的封装 如果是可读并且可写,并且在读写的时候没有任何逻辑验证.
             *      那么这个时候我们就可以写1个自动属性.
             *      
             *   b. 程序员可以不声明字段,并且在属性中也不必去写get和set的实现.
             *      在C#编译器编译以后.会自动的生产1个被保护的字段,并在get和set中生成代码实现
             *      这些代码实现没有任何逻辑验证.
             *      
             *   c. 什么时候可以写自动属性
             *      对字段的操作可读并且可写, 并且在读写的时候没有任何逻辑验证.
             *   
             * 
             */

            Person p = new Person();
            int age = 12;
            p.Name = "jack";
            Console.WriteLine(p.Name);

        }
    }
}
