using System;
using System.Collections.Generic;
using System.Linq;
using System.Text; 

namespace C01类与对象
{
    class Program
    {
        static void Main(string[] args)
        {
 



            /* 1. 在编程中,一定是先有类,然后再根据这个类的模板来创建对象.
             * 2. 类: 类是 对1群具有相同的特征和功能的事物的1个统称,类是抽象的,不能直接使用.
             * 
             * 2. 如何定义类
             *    a. 语法
             *       class 类名
             *       {
             *          
             *       }
             *    b. 位置
             *      在命名空间的下面.
             *    c.1个类独占1个源文件.
             *      我们添加源文件的时候指定的是源文件的名称.
             *      只不过VS帮助我们在这个源文件中声明了1个和原文件名称相同的类.
             *      建议类的名字和源文件的名字相同 这样方便管理.
             * 
             * 3. 类的成员:
             *    在类中我们就定义好 这类事物所拥有的共同的特征和行为.
             *    a. 将这类事物所具有的共同的特征 定义为这个类的成员变量.
             *    b. 将这类事物所拥有的共同的行为 定义为这个类的方法.
             *       注意:我们如果自己定义类,这个类中的成员变量和方法不要加上static。
             *       
             * 
             * 4. 关于类的名字:
             *    a. 类的名字一定要有意义,这个类描述的是那1类事物 就用这个事物命名就可以了.s
             *       名词.
             *    b. 每个单词的首字母大写.
             *
             * 
             * 5. 类是抽象的,不能直接使用其中的功能.
             *    如果我们非要使用呢? 那么我们就必须找到这个类中的1个具体的存在. 在使用这个具体的存在.
             *    
             * 6. 创建类的对象
             *    找到类中的1个具体存在:  创建类的1个对象.
             *    语法:
             *    类名 对象名 = new 类名();
             *    Person p1 = new Person();
             *    当CPU执行到这句代码的时候. 就会根据Person这个模板创建1个对象.
             *    这个对象就拥有了Person模板中定义的所有的特征和功能 不会多1个 也不会少1个.
             * 
             * 7. 对象拥有类模板中定义的所有的功能.
             *    这个时候对象中的功能我们就可以直接调用了.
             *    语法:
             *    对象名.成员;
             * 
             * 8. 类的成员:
             *    定义在类中的东东统称为类的成员:
             *    a.成员变量  成员字段  字段
             *    b.成员方法  方法 
             * 
             * 9. 创建类的对象.
             *    类名 对象名 = new 类名();
             *    Person p1 = new Person();
             * 
             *    类本质上是我们自定义的一种数据类型. 
             *    Person本质上应该是我们自定义的数据类型,p1应该是1个变量 这个变量的类型是Person类型.
             *    new Person() 是1个表达式 new是1个运算符.
             *    
             *    new关键字做的事情:
             *    a. 在堆内存中开辟1块合适大小的空间.
             *    b. 在这个空间中根据类的模板来创建对象. 
             *       就是类中有哪些成员,那么就把这些成员创建在这个空间中.
             *    c. 调用这个对象的构造函数.
             *    d. 将这个对象在堆空间中的地址返回.
             *    
             * 10. 调用对象的成员
             *     创建对象以后,对象中就拥有了这个类模板中定义的所有的成员(字段和方法)
             *     对象名.成员
             *     .的意思.    的     之     の
             * 
             *    
             * 11. 在VS中书写C#代码,如果点不出来,就是真的没有.
             * 12. 类的成员的访问修饰符.
             *     我们可以用访问修饰符来 修饰 类的成员.
             *     public: 公共的.   被public修饰的成员可以在任意的地方通过对象名点出来访问.
             *     private:私有的    被private修饰的成员只可以在类的内部通过对象名点出访问.
             * 
             *     无论是被public修饰还是被private修饰的成员,都可以直接在类的内部访问.
             *     
             *     如果我们没有为类的成员写任意的访问修饰符,那么默认的访问修饰符就是private
             *     
             * 13. 成员字段在声明的时候如果没有给初始值,他们是有默认值的.
             *     值类型的成员字段的默认值是0
             *     引用类型的成员字段的默认值是 null
             *     
             * 14. 通过对象名点出成员来访问失败的原因
             *    a. 这个成员在对象中真的不存在.
             *    b. 有这个成员,但是访问权限不够.
             *   
             * 
             * 15.字段是属于对象的. 为对象的字段赋值的时候 数据的类型要和字段的类型一致.
             * 16.字段其实就是变量 所以在赋值和取值的时候  和普通的变量的操作是一样.
             * 
             * 17. 同1个类的多个对象之间毫无关系.
             *     唯一的关系就是 他们是根据同1个类模板创建出来的.
             *     所以他们拥有相同的成员. 但是成员字段的值是不同的 
             *     每1个对象都独自的有1份成员. 所有对象不是共享这些成员的.  
             * 
             * 18. 命名空间
             *    a. 命名空间下用来定义类.
             *    b. 命名空间的名字我们是可以自己指定的.
             *    c. 在同1个命名空间下面,是不允许定义多个类名相同的类.
             *    d. 命名空间的名字如果是相同的.那说明他们其实就是同1个命名空间.
             *    e. 在同1个命名空间下的类 我们可以直接访问.
             *       如果在1个命名空间中去访问另外的1个命名空间中的类.
             *       那么是不能直接访问这个类的.
             *       
             *       1). 使用类的全名称来访问. 通过类所在的命名空间逐级的往下点
             *       2). 在源文件的顶部使用using 将类所在的命名空间引入.
             *           那么就可以直接访问这个命名空间中的类了.
             *     f. 让VS自动分析这个类在那1个命名空间中.
             *        ctrl+.
             *        前提是类名一定要写正确. 
             *    
             *     g. 在不同的命名空间中是运行存在相同名字的类.
             *        命名空间其实就是用来管理类的,防止类名冲突.
             *    
             * 19. 在1个项目中无法直接访问另外的1个项目中的类.
             *
             * 20. 
             * 
             * 
             * 
             * 
             * 
             * 方法访问字段
             * 参数和返回值
             */


           

           





            //System C01类与对象 
            //Random r = new System.Random(); 
            //Console.WriteLine("hi"); 
            //Student s = new Student();
            //Pig p1 = new Pig();
            //Animal a = new Animal(); 
            //Person p = new Person();




            //Student s1 = new Student();
            //s1.name = "杰克";
            //s1.age = 19;
            //s1.gender = true;
            //s1.className = ".Net第13期基础班";
            //s1.stuNo = "itcast2222222";  
            //Student s2 = new Student();
            //Console.WriteLine(s2.className); 
            //Person p = new Person();











            Console.ReadKey();

            //Person p1 = new Person();
            //p1.name = "jack";
            //p1.age = 12;
            //p1.gender = true;



            //p1.Sing();
            //p1.Run();
           



            Console.ReadKey();
        }



    }
}
